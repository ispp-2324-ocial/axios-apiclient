/* tslint:disable */
/* eslint-disable */
/**
 * Ocial API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * * `email` - EMAIL * `google` - GOOGLE
 * @export
 * @enum {string}
 */

export enum AuthProviderEnum {
    Email = 'email',
    Google = 'google'
}


/**
 * * `Sports` - SPORTS * `Music` - MUSIC * `Markets` - MARKETS * `Relax activities` - RELAX_ACTIVITIES * `Live concert` - LIVE_CONCERT
 * @export
 * @enum {string}
 */

export enum CategoryEnum {
    Sports = 'Sports',
    Music = 'Music',
    Markets = 'Markets',
    RelaxActivities = 'Relax activities',
    LiveConcert = 'Live concert'
}


/**
 * 
 * @export
 * @interface Chat
 */
export interface Chat {
    /**
     * 
     * @type {number}
     * @memberof Chat
     */
    'id'?: number;
    /**
     * 
     * @type {Array<Message>}
     * @memberof Chat
     */
    'messages'?: Array<Message>;
}
/**
 * 
 * @export
 * @interface ClientCreate
 */
export interface ClientCreate {
    /**
     * 
     * @type {number}
     * @memberof ClientCreate
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientCreate
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ClientCreate
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientCreate
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ClientCreate
     */
    'imageB64'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientCreate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ClientCreate
     */
    'identificationDocument': string;
    /**
     * 
     * @type {TypeClientEnum}
     * @memberof ClientCreate
     */
    'typeClient'?: TypeClientEnum;
    /**
     * 
     * @type {number}
     * @memberof ClientCreate
     */
    'defaultLatitude': number;
    /**
     * 
     * @type {number}
     * @memberof ClientCreate
     */
    'defaultLongitude': number;
    /**
     * 
     * @type {number}
     * @memberof ClientCreate
     */
    'djangoUser': number;
    /**
     * 
     * @type {number}
     * @memberof ClientCreate
     */
    'image'?: number | null;
}


/**
 * 
 * @export
 * @interface ClientGet
 */
export interface ClientGet {
    /**
     * 
     * @type {number}
     * @memberof ClientGet
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientGet
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ClientGet
     */
    'identificationDocument': string;
    /**
     * 
     * @type {TypeClientEnum}
     * @memberof ClientGet
     */
    'typeClient'?: TypeClientEnum;
    /**
     * 
     * @type {number}
     * @memberof ClientGet
     */
    'defaultLatitude': number;
    /**
     * 
     * @type {number}
     * @memberof ClientGet
     */
    'defaultLongitude': number;
    /**
     * 
     * @type {number}
     * @memberof ClientGet
     */
    'djangoUser': number;
    /**
     * 
     * @type {number}
     * @memberof ClientGet
     */
    'image'?: number | null;
}


/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    'id'?: number;
    /**
     * 
     * @type {OcialClient}
     * @memberof Event
     */
    'ocialClient': OcialClient;
    /**
     * 
     * @type {Image}
     * @memberof Event
     */
    'image'?: Image;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'place': string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'event': string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'timeStart'?: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'timeEnd'?: string;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    'capacity'?: number;
    /**
     * 
     * @type {CategoryEnum}
     * @memberof Event
     */
    'category'?: CategoryEnum;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    'longitude': number;
}


/**
 * 
 * @export
 * @interface EventCreate
 */
export interface EventCreate {
    /**
     * 
     * @type {number}
     * @memberof EventCreate
     */
    'id'?: number;
    /**
     * 
     * @type {OcialClient}
     * @memberof EventCreate
     */
    'ocialClient': OcialClient;
    /**
     * 
     * @type {string}
     * @memberof EventCreate
     */
    'imageB64'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventCreate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EventCreate
     */
    'place': string;
    /**
     * 
     * @type {string}
     * @memberof EventCreate
     */
    'event': string;
    /**
     * 
     * @type {string}
     * @memberof EventCreate
     */
    'timeStart'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventCreate
     */
    'timeEnd'?: string;
    /**
     * 
     * @type {number}
     * @memberof EventCreate
     */
    'capacity'?: number;
    /**
     * 
     * @type {CategoryEnum}
     * @memberof EventCreate
     */
    'category'?: CategoryEnum;
    /**
     * 
     * @type {number}
     * @memberof EventCreate
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof EventCreate
     */
    'longitude': number;
    /**
     * 
     * @type {number}
     * @memberof EventCreate
     */
    'image'?: number | null;
}


/**
 * 
 * @export
 * @interface EventGet
 */
export interface EventGet {
    /**
     * 
     * @type {number}
     * @memberof EventGet
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EventGet
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EventGet
     */
    'place': string;
    /**
     * 
     * @type {string}
     * @memberof EventGet
     */
    'event': string;
    /**
     * 
     * @type {string}
     * @memberof EventGet
     */
    'timeStart'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventGet
     */
    'timeEnd'?: string;
    /**
     * 
     * @type {number}
     * @memberof EventGet
     */
    'capacity'?: number;
    /**
     * 
     * @type {CategoryEnum}
     * @memberof EventGet
     */
    'category'?: CategoryEnum;
    /**
     * 
     * @type {number}
     * @memberof EventGet
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof EventGet
     */
    'longitude': number;
    /**
     * 
     * @type {number}
     * @memberof EventGet
     */
    'ocialClient': number;
    /**
     * 
     * @type {number}
     * @memberof EventGet
     */
    'image'?: number | null;
}


/**
 * 
 * @export
 * @interface GoogleSocialAuth
 */
export interface GoogleSocialAuth {
    /**
     * 
     * @type {string}
     * @memberof GoogleSocialAuth
     */
    'auth_token': string;
}
/**
 * 
 * @export
 * @interface GoogleSocialAuthResponse
 */
export interface GoogleSocialAuthResponse {
    /**
     * 
     * @type {string}
     * @memberof GoogleSocialAuthResponse
     */
    'token'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GoogleSocialAuthResponse
     */
    'isClient': boolean;
}
/**
 * 
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'image': string;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'blurhash': string;
}
/**
 * 
 * @export
 * @interface Like
 */
export interface Like {
    /**
     * 
     * @type {number}
     * @memberof Like
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Like
     */
    'event': number;
    /**
     * 
     * @type {number}
     * @memberof Like
     */
    'user': number;
}
/**
 * Serializer for user login.  Fields: - `username` (string): The username of the user. - `password` (string): The password of the user.
 * @export
 * @interface LoginUser
 */
export interface LoginUser {
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @type {string}
     * @memberof LoginUser
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof LoginUser
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'content': string;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    'chatId': number;
}
/**
 * 
 * @export
 * @interface MessageCreate
 */
export interface MessageCreate {
    /**
     * 
     * @type {number}
     * @memberof MessageCreate
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MessageCreate
     */
    'content': string;
}
/**
 * 
 * @export
 * @interface OcialClient
 */
export interface OcialClient {
    /**
     * 
     * @type {string}
     * @memberof OcialClient
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof OcialClient
     */
    'defaultLatitude': number;
    /**
     * 
     * @type {number}
     * @memberof OcialClient
     */
    'defaultLongitude': number;
}
/**
 * 
 * @export
 * @interface PatchedRatingCreate
 */
export interface PatchedRatingCreate {
    /**
     * 
     * @type {number}
     * @memberof PatchedRatingCreate
     */
    'score'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedRatingCreate
     */
    'comment'?: string | null;
}
/**
 * 
 * @export
 * @interface Rating
 */
export interface Rating {
    /**
     * 
     * @type {number}
     * @memberof Rating
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Rating
     */
    'score'?: number;
    /**
     * 
     * @type {string}
     * @memberof Rating
     */
    'comment'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Rating
     */
    'client': number;
    /**
     * 
     * @type {number}
     * @memberof Rating
     */
    'user': number;
}
/**
 * 
 * @export
 * @interface RatingCreate
 */
export interface RatingCreate {
    /**
     * 
     * @type {number}
     * @memberof RatingCreate
     */
    'score'?: number;
    /**
     * 
     * @type {string}
     * @memberof RatingCreate
     */
    'comment'?: string | null;
}
/**
 * 
 * @export
 * @interface Subscription
 */
export interface Subscription {
    /**
     * 
     * @type {number}
     * @memberof Subscription
     */
    'id'?: number;
    /**
     * 
     * @type {TypeSubscriptionEnum}
     * @memberof Subscription
     */
    'typeSubscription'?: TypeSubscriptionEnum;
    /**
     * 
     * @type {number}
     * @memberof Subscription
     */
    'numEvents'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Subscription
     */
    'canEditEvent'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Subscription
     */
    'canSendNotifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Subscription
     */
    'canHaveRecurrentEvents'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Subscription
     */
    'canHaveOustandingEvents'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Subscription
     */
    'canHaveRating'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Subscription
     */
    'ocialClientId': number;
}


/**
 * 
 * @export
 * @interface SubscriptionCreateUpdate
 */
export interface SubscriptionCreateUpdate {
    /**
     * 
     * @type {TypeSubscriptionEnum}
     * @memberof SubscriptionCreateUpdate
     */
    'typeSubscription'?: TypeSubscriptionEnum;
}


/**
 * 
 * @export
 * @interface TokenResponse
 */
export interface TokenResponse {
    /**
     * 
     * @type {string}
     * @memberof TokenResponse
     */
    'token'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TokenResponse
     */
    'isClient': boolean;
}
/**
 * * `Small business` - SMALL_BUSINESS * `Artist` - ARTIST * `Bar Restaurant` - BAR_RESTAURANT * `Local Guide` - LOCAL_GUIDE * `Events And Concerts` - EVENTS_AND_CONCERTS
 * @export
 * @enum {string}
 */

export enum TypeClientEnum {
    SmallBusiness = 'Small business',
    Artist = 'Artist',
    BarRestaurant = 'Bar Restaurant',
    LocalGuide = 'Local Guide',
    EventsAndConcerts = 'Events And Concerts'
}


/**
 * * `Free` - FREE * `Basic` - BASIC * `Pro` - PRO
 * @export
 * @enum {string}
 */

export enum TypeSubscriptionEnum {
    Free = 'Free',
    Basic = 'Basic',
    Pro = 'Pro'
}


/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username': string;
    /**
     * 
     * @type {AuthProviderEnum}
     * @memberof User
     */
    'auth_provider'?: AuthProviderEnum;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'lastKnowLocLat': number;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'lastKnowLocLong': number;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'djangoUser': number;
}


/**
 * 
 * @export
 * @interface UserGet
 */
export interface UserGet {
    /**
     * 
     * @type {number}
     * @memberof UserGet
     */
    'id'?: number;
    /**
     * 
     * @type {AuthProviderEnum}
     * @memberof UserGet
     */
    'auth_provider'?: AuthProviderEnum;
    /**
     * 
     * @type {number}
     * @memberof UserGet
     */
    'lastKnowLocLat': number;
    /**
     * 
     * @type {number}
     * @memberof UserGet
     */
    'lastKnowLocLong': number;
    /**
     * 
     * @type {number}
     * @memberof UserGet
     */
    'djangoUser': number;
}



/**
 * ChatApi - axios parameter creator
 * @export
 */
export const ChatApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new chat
         * @param {Chat} [chat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatCreateCreate: async (chat?: Chat, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/chat/create/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chat, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new message in a chat
         * @param {number} chatId 
         * @param {MessageCreate} messageCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatCreateMessageCreate: async (chatId: number, messageCreate: MessageCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('chatCreateMessageCreate', 'chatId', chatId)
            // verify required parameter 'messageCreate' is not null or undefined
            assertParamExists('chatCreateMessageCreate', 'messageCreate', messageCreate)
            const localVarPath = `/api/chat/{chat_id}/createMessage/`
                .replace(`{${"chat_id"}}`, encodeURIComponent(String(chatId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a chat
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatDeleteDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('chatDeleteDestroy', 'id', id)
            const localVarPath = `/api/chat/{id}/delete/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a message
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatDeleteMessageDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('chatDeleteMessageDestroy', 'id', id)
            const localVarPath = `/api/chat/{id}/deleteMessage/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of chats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatListList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/chat/list/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Detail of a chat
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatMessagesRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('chatMessagesRetrieve', 'id', id)
            const localVarPath = `/api/chat/{id}/messages`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatApi - functional programming interface
 * @export
 */
export const ChatApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new chat
         * @param {Chat} [chat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatCreateCreate(chat?: Chat, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Chat>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatCreateCreate(chat, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.chatCreateCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new message in a chat
         * @param {number} chatId 
         * @param {MessageCreate} messageCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatCreateMessageCreate(chatId: number, messageCreate: MessageCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatCreateMessageCreate(chatId, messageCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.chatCreateMessageCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a chat
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatDeleteDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatDeleteDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.chatDeleteDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a message
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatDeleteMessageDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatDeleteMessageDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.chatDeleteMessageDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of chats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatListList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Chat>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatListList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.chatListList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Detail of a chat
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatMessagesRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Chat>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatMessagesRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.chatMessagesRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChatApi - factory interface
 * @export
 */
export const ChatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatApiFp(configuration)
    return {
        /**
         * Create a new chat
         * @param {ChatApiChatCreateCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatCreateCreate(requestParameters: ChatApiChatCreateCreateRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Chat> {
            return localVarFp.chatCreateCreate(requestParameters.chat, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new message in a chat
         * @param {ChatApiChatCreateMessageCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatCreateMessageCreate(requestParameters: ChatApiChatCreateMessageCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Message> {
            return localVarFp.chatCreateMessageCreate(requestParameters.chatId, requestParameters.messageCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a chat
         * @param {ChatApiChatDeleteDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatDeleteDestroy(requestParameters: ChatApiChatDeleteDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.chatDeleteDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a message
         * @param {ChatApiChatDeleteMessageDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatDeleteMessageDestroy(requestParameters: ChatApiChatDeleteMessageDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.chatDeleteMessageDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * List of chats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatListList(options?: RawAxiosRequestConfig): AxiosPromise<Array<Chat>> {
            return localVarFp.chatListList(options).then((request) => request(axios, basePath));
        },
        /**
         * Detail of a chat
         * @param {ChatApiChatMessagesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatMessagesRetrieve(requestParameters: ChatApiChatMessagesRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<Chat> {
            return localVarFp.chatMessagesRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for chatCreateCreate operation in ChatApi.
 * @export
 * @interface ChatApiChatCreateCreateRequest
 */
export interface ChatApiChatCreateCreateRequest {
    /**
     * 
     * @type {Chat}
     * @memberof ChatApiChatCreateCreate
     */
    readonly chat?: Chat
}

/**
 * Request parameters for chatCreateMessageCreate operation in ChatApi.
 * @export
 * @interface ChatApiChatCreateMessageCreateRequest
 */
export interface ChatApiChatCreateMessageCreateRequest {
    /**
     * 
     * @type {number}
     * @memberof ChatApiChatCreateMessageCreate
     */
    readonly chatId: number

    /**
     * 
     * @type {MessageCreate}
     * @memberof ChatApiChatCreateMessageCreate
     */
    readonly messageCreate: MessageCreate
}

/**
 * Request parameters for chatDeleteDestroy operation in ChatApi.
 * @export
 * @interface ChatApiChatDeleteDestroyRequest
 */
export interface ChatApiChatDeleteDestroyRequest {
    /**
     * 
     * @type {number}
     * @memberof ChatApiChatDeleteDestroy
     */
    readonly id: number
}

/**
 * Request parameters for chatDeleteMessageDestroy operation in ChatApi.
 * @export
 * @interface ChatApiChatDeleteMessageDestroyRequest
 */
export interface ChatApiChatDeleteMessageDestroyRequest {
    /**
     * 
     * @type {number}
     * @memberof ChatApiChatDeleteMessageDestroy
     */
    readonly id: number
}

/**
 * Request parameters for chatMessagesRetrieve operation in ChatApi.
 * @export
 * @interface ChatApiChatMessagesRetrieveRequest
 */
export interface ChatApiChatMessagesRetrieveRequest {
    /**
     * 
     * @type {number}
     * @memberof ChatApiChatMessagesRetrieve
     */
    readonly id: number
}

/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
export class ChatApi extends BaseAPI {
    /**
     * Create a new chat
     * @param {ChatApiChatCreateCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public chatCreateCreate(requestParameters: ChatApiChatCreateCreateRequest = {}, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).chatCreateCreate(requestParameters.chat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new message in a chat
     * @param {ChatApiChatCreateMessageCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public chatCreateMessageCreate(requestParameters: ChatApiChatCreateMessageCreateRequest, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).chatCreateMessageCreate(requestParameters.chatId, requestParameters.messageCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a chat
     * @param {ChatApiChatDeleteDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public chatDeleteDestroy(requestParameters: ChatApiChatDeleteDestroyRequest, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).chatDeleteDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a message
     * @param {ChatApiChatDeleteMessageDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public chatDeleteMessageDestroy(requestParameters: ChatApiChatDeleteMessageDestroyRequest, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).chatDeleteMessageDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of chats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public chatListList(options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).chatListList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Detail of a chat
     * @param {ChatApiChatMessagesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public chatMessagesRetrieve(requestParameters: ChatApiChatMessagesRetrieveRequest, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).chatMessagesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EventApi - axios parameter creator
 * @export
 */
export const EventApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get client instance by event id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventClientRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eventClientRetrieve', 'id', id)
            const localVarPath = `/api/event/{id}/client/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new event
         * @param {EventCreate} eventCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventCreateCreate: async (eventCreate: EventCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventCreate' is not null or undefined
            assertParamExists('eventCreateCreate', 'eventCreate', eventCreate)
            const localVarPath = `/api/event/create/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an event
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventDeleteDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eventDeleteDestroy', 'id', id)
            const localVarPath = `/api/event/{id}/delete/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Like an event
         * @param {number} id 
         * @param {Like} like 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventLikeCreate: async (id: number, like: Like, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eventLikeCreate', 'id', id)
            // verify required parameter 'like' is not null or undefined
            assertParamExists('eventLikeCreate', 'like', like)
            const localVarPath = `/api/event/{id}/like/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(like, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unlike an event
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventLikeDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eventLikeDestroy', 'id', id)
            const localVarPath = `/api/event/{id}/like/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get likes of an event
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventLikeList: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eventLikeList', 'id', id)
            const localVarPath = `/api/event/{id}/like/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details of an event by event id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventList: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eventList', 'id', id)
            const localVarPath = `/api/event/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of events by client id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventListClientIdList: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eventListClientIdList', 'id', id)
            const localVarPath = `/api/event/list/client/id/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of events by current client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventListClientList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/event/list/client/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventListList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/event/list/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of events near a location
         * @param {number} latitude Latitude of the center point
         * @param {number} longitude Longitude of the center point
         * @param {number} radius Radius in kilometers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventNearbyList: async (latitude: number, longitude: number, radius: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'latitude' is not null or undefined
            assertParamExists('eventNearbyList', 'latitude', latitude)
            // verify required parameter 'longitude' is not null or undefined
            assertParamExists('eventNearbyList', 'longitude', longitude)
            // verify required parameter 'radius' is not null or undefined
            assertParamExists('eventNearbyList', 'radius', radius)
            const localVarPath = `/api/event/nearby/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an event
         * @param {number} id 
         * @param {EventCreate} eventCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventUpdateUpdate: async (id: number, eventCreate: EventCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eventUpdateUpdate', 'id', id)
            // verify required parameter 'eventCreate' is not null or undefined
            assertParamExists('eventUpdateUpdate', 'eventCreate', eventCreate)
            const localVarPath = `/api/event/{id}/update/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventApi - functional programming interface
 * @export
 */
export const EventApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventApiAxiosParamCreator(configuration)
    return {
        /**
         * Get client instance by event id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventClientRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OcialClient>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventClientRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.eventClientRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new event
         * @param {EventCreate} eventCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventCreateCreate(eventCreate: EventCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventCreateCreate(eventCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.eventCreateCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an event
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventDeleteDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventDeleteDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.eventDeleteDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Like an event
         * @param {number} id 
         * @param {Like} like 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventLikeCreate(id: number, like: Like, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Like>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventLikeCreate(id, like, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.eventLikeCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Unlike an event
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventLikeDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventLikeDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.eventLikeDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get likes of an event
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventLikeList(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Like>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventLikeList(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.eventLikeList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get details of an event by event id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventList(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EventGet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventList(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.eventList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of events by client id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventListClientIdList(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Event>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventListClientIdList(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.eventListClientIdList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of events by current client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventListClientList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Event>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventListClientList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.eventListClientList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventListList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Event>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventListList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.eventListList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of events near a location
         * @param {number} latitude Latitude of the center point
         * @param {number} longitude Longitude of the center point
         * @param {number} radius Radius in kilometers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventNearbyList(latitude: number, longitude: number, radius: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Event>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventNearbyList(latitude, longitude, radius, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.eventNearbyList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an event
         * @param {number} id 
         * @param {EventCreate} eventCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventUpdateUpdate(id: number, eventCreate: EventCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventUpdateUpdate(id, eventCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.eventUpdateUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EventApi - factory interface
 * @export
 */
export const EventApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventApiFp(configuration)
    return {
        /**
         * Get client instance by event id
         * @param {EventApiEventClientRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventClientRetrieve(requestParameters: EventApiEventClientRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<OcialClient>> {
            return localVarFp.eventClientRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new event
         * @param {EventApiEventCreateCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventCreateCreate(requestParameters: EventApiEventCreateCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eventCreateCreate(requestParameters.eventCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an event
         * @param {EventApiEventDeleteDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventDeleteDestroy(requestParameters: EventApiEventDeleteDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eventDeleteDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Like an event
         * @param {EventApiEventLikeCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventLikeCreate(requestParameters: EventApiEventLikeCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Like> {
            return localVarFp.eventLikeCreate(requestParameters.id, requestParameters.like, options).then((request) => request(axios, basePath));
        },
        /**
         * Unlike an event
         * @param {EventApiEventLikeDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventLikeDestroy(requestParameters: EventApiEventLikeDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eventLikeDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get likes of an event
         * @param {EventApiEventLikeListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventLikeList(requestParameters: EventApiEventLikeListRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Like>> {
            return localVarFp.eventLikeList(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details of an event by event id
         * @param {EventApiEventListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventList(requestParameters: EventApiEventListRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<EventGet>> {
            return localVarFp.eventList(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * List of events by client id
         * @param {EventApiEventListClientIdListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventListClientIdList(requestParameters: EventApiEventListClientIdListRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Event>> {
            return localVarFp.eventListClientIdList(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * List of events by current client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventListClientList(options?: RawAxiosRequestConfig): AxiosPromise<Array<Event>> {
            return localVarFp.eventListClientList(options).then((request) => request(axios, basePath));
        },
        /**
         * List of events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventListList(options?: RawAxiosRequestConfig): AxiosPromise<Array<Event>> {
            return localVarFp.eventListList(options).then((request) => request(axios, basePath));
        },
        /**
         * List of events near a location
         * @param {EventApiEventNearbyListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventNearbyList(requestParameters: EventApiEventNearbyListRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Event>> {
            return localVarFp.eventNearbyList(requestParameters.latitude, requestParameters.longitude, requestParameters.radius, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an event
         * @param {EventApiEventUpdateUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventUpdateUpdate(requestParameters: EventApiEventUpdateUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eventUpdateUpdate(requestParameters.id, requestParameters.eventCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for eventClientRetrieve operation in EventApi.
 * @export
 * @interface EventApiEventClientRetrieveRequest
 */
export interface EventApiEventClientRetrieveRequest {
    /**
     * 
     * @type {number}
     * @memberof EventApiEventClientRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for eventCreateCreate operation in EventApi.
 * @export
 * @interface EventApiEventCreateCreateRequest
 */
export interface EventApiEventCreateCreateRequest {
    /**
     * 
     * @type {EventCreate}
     * @memberof EventApiEventCreateCreate
     */
    readonly eventCreate: EventCreate
}

/**
 * Request parameters for eventDeleteDestroy operation in EventApi.
 * @export
 * @interface EventApiEventDeleteDestroyRequest
 */
export interface EventApiEventDeleteDestroyRequest {
    /**
     * 
     * @type {number}
     * @memberof EventApiEventDeleteDestroy
     */
    readonly id: number
}

/**
 * Request parameters for eventLikeCreate operation in EventApi.
 * @export
 * @interface EventApiEventLikeCreateRequest
 */
export interface EventApiEventLikeCreateRequest {
    /**
     * 
     * @type {number}
     * @memberof EventApiEventLikeCreate
     */
    readonly id: number

    /**
     * 
     * @type {Like}
     * @memberof EventApiEventLikeCreate
     */
    readonly like: Like
}

/**
 * Request parameters for eventLikeDestroy operation in EventApi.
 * @export
 * @interface EventApiEventLikeDestroyRequest
 */
export interface EventApiEventLikeDestroyRequest {
    /**
     * 
     * @type {number}
     * @memberof EventApiEventLikeDestroy
     */
    readonly id: number
}

/**
 * Request parameters for eventLikeList operation in EventApi.
 * @export
 * @interface EventApiEventLikeListRequest
 */
export interface EventApiEventLikeListRequest {
    /**
     * 
     * @type {number}
     * @memberof EventApiEventLikeList
     */
    readonly id: number
}

/**
 * Request parameters for eventList operation in EventApi.
 * @export
 * @interface EventApiEventListRequest
 */
export interface EventApiEventListRequest {
    /**
     * 
     * @type {number}
     * @memberof EventApiEventList
     */
    readonly id: number
}

/**
 * Request parameters for eventListClientIdList operation in EventApi.
 * @export
 * @interface EventApiEventListClientIdListRequest
 */
export interface EventApiEventListClientIdListRequest {
    /**
     * 
     * @type {number}
     * @memberof EventApiEventListClientIdList
     */
    readonly id: number
}

/**
 * Request parameters for eventNearbyList operation in EventApi.
 * @export
 * @interface EventApiEventNearbyListRequest
 */
export interface EventApiEventNearbyListRequest {
    /**
     * Latitude of the center point
     * @type {number}
     * @memberof EventApiEventNearbyList
     */
    readonly latitude: number

    /**
     * Longitude of the center point
     * @type {number}
     * @memberof EventApiEventNearbyList
     */
    readonly longitude: number

    /**
     * Radius in kilometers
     * @type {number}
     * @memberof EventApiEventNearbyList
     */
    readonly radius: number
}

/**
 * Request parameters for eventUpdateUpdate operation in EventApi.
 * @export
 * @interface EventApiEventUpdateUpdateRequest
 */
export interface EventApiEventUpdateUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof EventApiEventUpdateUpdate
     */
    readonly id: number

    /**
     * 
     * @type {EventCreate}
     * @memberof EventApiEventUpdateUpdate
     */
    readonly eventCreate: EventCreate
}

/**
 * EventApi - object-oriented interface
 * @export
 * @class EventApi
 * @extends {BaseAPI}
 */
export class EventApi extends BaseAPI {
    /**
     * Get client instance by event id
     * @param {EventApiEventClientRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventClientRetrieve(requestParameters: EventApiEventClientRetrieveRequest, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).eventClientRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new event
     * @param {EventApiEventCreateCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventCreateCreate(requestParameters: EventApiEventCreateCreateRequest, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).eventCreateCreate(requestParameters.eventCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an event
     * @param {EventApiEventDeleteDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventDeleteDestroy(requestParameters: EventApiEventDeleteDestroyRequest, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).eventDeleteDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Like an event
     * @param {EventApiEventLikeCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventLikeCreate(requestParameters: EventApiEventLikeCreateRequest, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).eventLikeCreate(requestParameters.id, requestParameters.like, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unlike an event
     * @param {EventApiEventLikeDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventLikeDestroy(requestParameters: EventApiEventLikeDestroyRequest, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).eventLikeDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get likes of an event
     * @param {EventApiEventLikeListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventLikeList(requestParameters: EventApiEventLikeListRequest, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).eventLikeList(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details of an event by event id
     * @param {EventApiEventListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventList(requestParameters: EventApiEventListRequest, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).eventList(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of events by client id
     * @param {EventApiEventListClientIdListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventListClientIdList(requestParameters: EventApiEventListClientIdListRequest, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).eventListClientIdList(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of events by current client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventListClientList(options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).eventListClientList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of events
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventListList(options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).eventListList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of events near a location
     * @param {EventApiEventNearbyListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventNearbyList(requestParameters: EventApiEventNearbyListRequest, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).eventNearbyList(requestParameters.latitude, requestParameters.longitude, requestParameters.radius, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an event
     * @param {EventApiEventUpdateUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventUpdateUpdate(requestParameters: EventApiEventUpdateUpdateRequest, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).eventUpdateUpdate(requestParameters.id, requestParameters.eventCreate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SubscriptionApi - axios parameter creator
 * @export
 */
export const SubscriptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new subscription with specific behavior based on subscription type.
         * @param {SubscriptionCreateUpdate} [subscriptionCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionCreateCreate: async (subscriptionCreateUpdate?: SubscriptionCreateUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/subscription/create/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionCreateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the current subscription of the authenticated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionDeleteDestroy: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/subscription/delete/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the current subscription for the authenticated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionGetList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/subscription/get/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the subscription of the authenticated user
         * @param {SubscriptionCreateUpdate} [subscriptionCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionUpdateUpdate: async (subscriptionCreateUpdate?: SubscriptionCreateUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/subscription/update/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionCreateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscriptionApi - functional programming interface
 * @export
 */
export const SubscriptionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubscriptionApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new subscription with specific behavior based on subscription type.
         * @param {SubscriptionCreateUpdate} [subscriptionCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionCreateCreate(subscriptionCreateUpdate?: SubscriptionCreateUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionCreateCreate(subscriptionCreateUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubscriptionApi.subscriptionCreateCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete the current subscription of the authenticated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionDeleteDestroy(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionDeleteDestroy(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubscriptionApi.subscriptionDeleteDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the current subscription for the authenticated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionGetList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Subscription>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionGetList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubscriptionApi.subscriptionGetList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the subscription of the authenticated user
         * @param {SubscriptionCreateUpdate} [subscriptionCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionUpdateUpdate(subscriptionCreateUpdate?: SubscriptionCreateUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionUpdateUpdate(subscriptionCreateUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubscriptionApi.subscriptionUpdateUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SubscriptionApi - factory interface
 * @export
 */
export const SubscriptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubscriptionApiFp(configuration)
    return {
        /**
         * Create a new subscription with specific behavior based on subscription type.
         * @param {SubscriptionApiSubscriptionCreateCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionCreateCreate(requestParameters: SubscriptionApiSubscriptionCreateCreateRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Subscription> {
            return localVarFp.subscriptionCreateCreate(requestParameters.subscriptionCreateUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the current subscription of the authenticated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionDeleteDestroy(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.subscriptionDeleteDestroy(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the current subscription for the authenticated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionGetList(options?: RawAxiosRequestConfig): AxiosPromise<Array<Subscription>> {
            return localVarFp.subscriptionGetList(options).then((request) => request(axios, basePath));
        },
        /**
         * Update the subscription of the authenticated user
         * @param {SubscriptionApiSubscriptionUpdateUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionUpdateUpdate(requestParameters: SubscriptionApiSubscriptionUpdateUpdateRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<SubscriptionCreateUpdate> {
            return localVarFp.subscriptionUpdateUpdate(requestParameters.subscriptionCreateUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for subscriptionCreateCreate operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiSubscriptionCreateCreateRequest
 */
export interface SubscriptionApiSubscriptionCreateCreateRequest {
    /**
     * 
     * @type {SubscriptionCreateUpdate}
     * @memberof SubscriptionApiSubscriptionCreateCreate
     */
    readonly subscriptionCreateUpdate?: SubscriptionCreateUpdate
}

/**
 * Request parameters for subscriptionUpdateUpdate operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiSubscriptionUpdateUpdateRequest
 */
export interface SubscriptionApiSubscriptionUpdateUpdateRequest {
    /**
     * 
     * @type {SubscriptionCreateUpdate}
     * @memberof SubscriptionApiSubscriptionUpdateUpdate
     */
    readonly subscriptionCreateUpdate?: SubscriptionCreateUpdate
}

/**
 * SubscriptionApi - object-oriented interface
 * @export
 * @class SubscriptionApi
 * @extends {BaseAPI}
 */
export class SubscriptionApi extends BaseAPI {
    /**
     * Create a new subscription with specific behavior based on subscription type.
     * @param {SubscriptionApiSubscriptionCreateCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    public subscriptionCreateCreate(requestParameters: SubscriptionApiSubscriptionCreateCreateRequest = {}, options?: RawAxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).subscriptionCreateCreate(requestParameters.subscriptionCreateUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the current subscription of the authenticated user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    public subscriptionDeleteDestroy(options?: RawAxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).subscriptionDeleteDestroy(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the current subscription for the authenticated user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    public subscriptionGetList(options?: RawAxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).subscriptionGetList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the subscription of the authenticated user
     * @param {SubscriptionApiSubscriptionUpdateUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    public subscriptionUpdateUpdate(requestParameters: SubscriptionApiSubscriptionUpdateUpdateRequest = {}, options?: RawAxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).subscriptionUpdateUpdate(requestParameters.subscriptionCreateUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve the current client data for the authenticated client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersClientGetList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/client/get/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ClientCreate} clientCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersClientRegisterCreate: async (clientCreate: ClientCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientCreate' is not null or undefined
            assertParamExists('usersClientRegisterCreate', 'clientCreate', clientCreate)
            const localVarPath = `/api/users/client/register/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginUser} loginUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLoginCreate: async (loginUser: LoginUser, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginUser' is not null or undefined
            assertParamExists('usersLoginCreate', 'loginUser', loginUser)
            const localVarPath = `/api/users/login/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLogoutCreate: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/logout/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a rating
         * @param {number} id 
         * @param {RatingCreate} [ratingCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRatingCreate: async (id: number, ratingCreate?: RatingCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersRatingCreate', 'id', id)
            const localVarPath = `/api/users/rating/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ratingCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a rating
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRatingDeleteDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersRatingDeleteDestroy', 'id', id)
            const localVarPath = `/api/users/rating/{id}/delete`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PatchedRatingCreate} [patchedRatingCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRatingUpdatePartialUpdate: async (id: number, patchedRatingCreate?: PatchedRatingCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersRatingUpdatePartialUpdate', 'id', id)
            const localVarPath = `/api/users/rating/{id}/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedRatingCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing rating
         * @param {number} id 
         * @param {RatingCreate} [ratingCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRatingUpdateUpdate: async (id: number, ratingCreate?: RatingCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersRatingUpdateUpdate', 'id', id)
            const localVarPath = `/api/users/rating/{id}/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ratingCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRatingsByClientRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersRatingsByClientRetrieve', 'id', id)
            const localVarPath = `/api/users/ratings/by-client/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the current user data for the authenticated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserGetList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/user/get/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GoogleSocialAuth} googleSocialAuth 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserGoogleOauth2Create: async (googleSocialAuth: GoogleSocialAuth, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'googleSocialAuth' is not null or undefined
            assertParamExists('usersUserGoogleOauth2Create', 'googleSocialAuth', googleSocialAuth)
            const localVarPath = `/api/users/user/google-oauth2/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(googleSocialAuth, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserRegisterCreate: async (user: User, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('usersUserRegisterCreate', 'user', user)
            const localVarPath = `/api/users/user/register/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve the current client data for the authenticated client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersClientGetList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ClientGet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersClientGetList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersClientGetList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ClientCreate} clientCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersClientRegisterCreate(clientCreate: ClientCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersClientRegisterCreate(clientCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersClientRegisterCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginUser} loginUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersLoginCreate(loginUser: LoginUser, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersLoginCreate(loginUser, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersLoginCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersLogoutCreate(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersLogoutCreate(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersLogoutCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a rating
         * @param {number} id 
         * @param {RatingCreate} [ratingCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRatingCreate(id: number, ratingCreate?: RatingCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RatingCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersRatingCreate(id, ratingCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersRatingCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a rating
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRatingDeleteDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersRatingDeleteDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersRatingDeleteDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {PatchedRatingCreate} [patchedRatingCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRatingUpdatePartialUpdate(id: number, patchedRatingCreate?: PatchedRatingCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RatingCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersRatingUpdatePartialUpdate(id, patchedRatingCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersRatingUpdatePartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an existing rating
         * @param {number} id 
         * @param {RatingCreate} [ratingCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRatingUpdateUpdate(id: number, ratingCreate?: RatingCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RatingCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersRatingUpdateUpdate(id, ratingCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersRatingUpdateUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRatingsByClientRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rating>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersRatingsByClientRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersRatingsByClientRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the current user data for the authenticated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserGetList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserGet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserGetList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersUserGetList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GoogleSocialAuth} googleSocialAuth 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserGoogleOauth2Create(googleSocialAuth: GoogleSocialAuth, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoogleSocialAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserGoogleOauth2Create(googleSocialAuth, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersUserGoogleOauth2Create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserRegisterCreate(user: User, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserRegisterCreate(user, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersUserRegisterCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Retrieve the current client data for the authenticated client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersClientGetList(options?: RawAxiosRequestConfig): AxiosPromise<Array<ClientGet>> {
            return localVarFp.usersClientGetList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsersApiUsersClientRegisterCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersClientRegisterCreate(requestParameters: UsersApiUsersClientRegisterCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersClientRegisterCreate(requestParameters.clientCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsersApiUsersLoginCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLoginCreate(requestParameters: UsersApiUsersLoginCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenResponse> {
            return localVarFp.usersLoginCreate(requestParameters.loginUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLogoutCreate(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersLogoutCreate(options).then((request) => request(axios, basePath));
        },
        /**
         * Create a rating
         * @param {UsersApiUsersRatingCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRatingCreate(requestParameters: UsersApiUsersRatingCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<RatingCreate> {
            return localVarFp.usersRatingCreate(requestParameters.id, requestParameters.ratingCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a rating
         * @param {UsersApiUsersRatingDeleteDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRatingDeleteDestroy(requestParameters: UsersApiUsersRatingDeleteDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersRatingDeleteDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsersApiUsersRatingUpdatePartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRatingUpdatePartialUpdate(requestParameters: UsersApiUsersRatingUpdatePartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<RatingCreate> {
            return localVarFp.usersRatingUpdatePartialUpdate(requestParameters.id, requestParameters.patchedRatingCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing rating
         * @param {UsersApiUsersRatingUpdateUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRatingUpdateUpdate(requestParameters: UsersApiUsersRatingUpdateUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<RatingCreate> {
            return localVarFp.usersRatingUpdateUpdate(requestParameters.id, requestParameters.ratingCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsersApiUsersRatingsByClientRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRatingsByClientRetrieve(requestParameters: UsersApiUsersRatingsByClientRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<Rating> {
            return localVarFp.usersRatingsByClientRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the current user data for the authenticated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserGetList(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserGet>> {
            return localVarFp.usersUserGetList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsersApiUsersUserGoogleOauth2CreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserGoogleOauth2Create(requestParameters: UsersApiUsersUserGoogleOauth2CreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<GoogleSocialAuthResponse> {
            return localVarFp.usersUserGoogleOauth2Create(requestParameters.googleSocialAuth, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsersApiUsersUserRegisterCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserRegisterCreate(requestParameters: UsersApiUsersUserRegisterCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersUserRegisterCreate(requestParameters.user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for usersClientRegisterCreate operation in UsersApi.
 * @export
 * @interface UsersApiUsersClientRegisterCreateRequest
 */
export interface UsersApiUsersClientRegisterCreateRequest {
    /**
     * 
     * @type {ClientCreate}
     * @memberof UsersApiUsersClientRegisterCreate
     */
    readonly clientCreate: ClientCreate
}

/**
 * Request parameters for usersLoginCreate operation in UsersApi.
 * @export
 * @interface UsersApiUsersLoginCreateRequest
 */
export interface UsersApiUsersLoginCreateRequest {
    /**
     * 
     * @type {LoginUser}
     * @memberof UsersApiUsersLoginCreate
     */
    readonly loginUser: LoginUser
}

/**
 * Request parameters for usersRatingCreate operation in UsersApi.
 * @export
 * @interface UsersApiUsersRatingCreateRequest
 */
export interface UsersApiUsersRatingCreateRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiUsersRatingCreate
     */
    readonly id: number

    /**
     * 
     * @type {RatingCreate}
     * @memberof UsersApiUsersRatingCreate
     */
    readonly ratingCreate?: RatingCreate
}

/**
 * Request parameters for usersRatingDeleteDestroy operation in UsersApi.
 * @export
 * @interface UsersApiUsersRatingDeleteDestroyRequest
 */
export interface UsersApiUsersRatingDeleteDestroyRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiUsersRatingDeleteDestroy
     */
    readonly id: number
}

/**
 * Request parameters for usersRatingUpdatePartialUpdate operation in UsersApi.
 * @export
 * @interface UsersApiUsersRatingUpdatePartialUpdateRequest
 */
export interface UsersApiUsersRatingUpdatePartialUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiUsersRatingUpdatePartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedRatingCreate}
     * @memberof UsersApiUsersRatingUpdatePartialUpdate
     */
    readonly patchedRatingCreate?: PatchedRatingCreate
}

/**
 * Request parameters for usersRatingUpdateUpdate operation in UsersApi.
 * @export
 * @interface UsersApiUsersRatingUpdateUpdateRequest
 */
export interface UsersApiUsersRatingUpdateUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiUsersRatingUpdateUpdate
     */
    readonly id: number

    /**
     * 
     * @type {RatingCreate}
     * @memberof UsersApiUsersRatingUpdateUpdate
     */
    readonly ratingCreate?: RatingCreate
}

/**
 * Request parameters for usersRatingsByClientRetrieve operation in UsersApi.
 * @export
 * @interface UsersApiUsersRatingsByClientRetrieveRequest
 */
export interface UsersApiUsersRatingsByClientRetrieveRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiUsersRatingsByClientRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for usersUserGoogleOauth2Create operation in UsersApi.
 * @export
 * @interface UsersApiUsersUserGoogleOauth2CreateRequest
 */
export interface UsersApiUsersUserGoogleOauth2CreateRequest {
    /**
     * 
     * @type {GoogleSocialAuth}
     * @memberof UsersApiUsersUserGoogleOauth2Create
     */
    readonly googleSocialAuth: GoogleSocialAuth
}

/**
 * Request parameters for usersUserRegisterCreate operation in UsersApi.
 * @export
 * @interface UsersApiUsersUserRegisterCreateRequest
 */
export interface UsersApiUsersUserRegisterCreateRequest {
    /**
     * 
     * @type {User}
     * @memberof UsersApiUsersUserRegisterCreate
     */
    readonly user: User
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Retrieve the current client data for the authenticated client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersClientGetList(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersClientGetList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiUsersClientRegisterCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersClientRegisterCreate(requestParameters: UsersApiUsersClientRegisterCreateRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersClientRegisterCreate(requestParameters.clientCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiUsersLoginCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersLoginCreate(requestParameters: UsersApiUsersLoginCreateRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersLoginCreate(requestParameters.loginUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersLogoutCreate(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersLogoutCreate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a rating
     * @param {UsersApiUsersRatingCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersRatingCreate(requestParameters: UsersApiUsersRatingCreateRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersRatingCreate(requestParameters.id, requestParameters.ratingCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a rating
     * @param {UsersApiUsersRatingDeleteDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersRatingDeleteDestroy(requestParameters: UsersApiUsersRatingDeleteDestroyRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersRatingDeleteDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiUsersRatingUpdatePartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersRatingUpdatePartialUpdate(requestParameters: UsersApiUsersRatingUpdatePartialUpdateRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersRatingUpdatePartialUpdate(requestParameters.id, requestParameters.patchedRatingCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing rating
     * @param {UsersApiUsersRatingUpdateUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersRatingUpdateUpdate(requestParameters: UsersApiUsersRatingUpdateUpdateRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersRatingUpdateUpdate(requestParameters.id, requestParameters.ratingCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiUsersRatingsByClientRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersRatingsByClientRetrieve(requestParameters: UsersApiUsersRatingsByClientRetrieveRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersRatingsByClientRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the current user data for the authenticated user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserGetList(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUserGetList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiUsersUserGoogleOauth2CreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserGoogleOauth2Create(requestParameters: UsersApiUsersUserGoogleOauth2CreateRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUserGoogleOauth2Create(requestParameters.googleSocialAuth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiUsersUserRegisterCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserRegisterCreate(requestParameters: UsersApiUsersUserRegisterCreateRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUserRegisterCreate(requestParameters.user, options).then((request) => request(this.axios, this.basePath));
    }
}



