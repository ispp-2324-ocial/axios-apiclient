/* tslint:disable */
/* eslint-disable */
/**
 * Ocial API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * * `0` - SPORTS * `1` - MUSIC * `2` - MARKETS * `3` - RELAX_ACTIVITIES * `4` - LIVE_CONCERT
 * @export
 * @enum {string}
 */

export enum CategoryEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4
}


/**
 * 
 * @export
 * @interface Chat
 */
export interface Chat {
    /**
     * 
     * @type {number}
     * @memberof Chat
     */
    'id'?: number;
    /**
     * 
     * @type {Array<Message>}
     * @memberof Chat
     */
    'messages'?: Array<Message>;
}
/**
 * 
 * @export
 * @interface Client
 */
export interface Client {
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'identification_document': string;
    /**
     * 
     * @type {TypeClientEnum}
     * @memberof Client
     */
    'typeClient'?: TypeClientEnum;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    'default_latitude': number;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    'default_longitude': number;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    'usuario': number;
}


/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'place': string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'event': string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'hour': string;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    'capacity'?: number;
    /**
     * 
     * @type {CategoryEnum}
     * @memberof Event
     */
    'category'?: CategoryEnum;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    'longitude': number;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    'ocialClient': number;
}


/**
 * Serializer for user login.  Fields: - `username` (string): The username of the user. - `password` (string): The password of the user.
 * @export
 * @interface LoginUser
 */
export interface LoginUser {
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @type {string}
     * @memberof LoginUser
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof LoginUser
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'content': string;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    'chat': number;
}
/**
 * 
 * @export
 * @interface MessageCreate
 */
export interface MessageCreate {
    /**
     * 
     * @type {number}
     * @memberof MessageCreate
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MessageCreate
     */
    'content': string;
    /**
     * 
     * @type {number}
     * @memberof MessageCreate
     */
    'chat': number;
}
/**
 * 
 * @export
 * @interface PatchedEvent
 */
export interface PatchedEvent {
    /**
     * 
     * @type {number}
     * @memberof PatchedEvent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedEvent
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedEvent
     */
    'place'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedEvent
     */
    'event'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedEvent
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedEvent
     */
    'hour'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedEvent
     */
    'capacity'?: number;
    /**
     * 
     * @type {CategoryEnum}
     * @memberof PatchedEvent
     */
    'category'?: CategoryEnum;
    /**
     * 
     * @type {number}
     * @memberof PatchedEvent
     */
    'latitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedEvent
     */
    'longitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedEvent
     */
    'ocialClient'?: number;
}


/**
 * 
 * @export
 * @interface TokenResponse
 */
export interface TokenResponse {
    /**
     * 
     * @type {string}
     * @memberof TokenResponse
     */
    'token'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TokenResponse
     */
    'isClient': boolean;
}
/**
 * * `0` - Small business * `1` - Artist * `2` - Bar Restaurant * `3` - Local Guide * `4` - Events And Concerts
 * @export
 * @enum {string}
 */

export enum TypeClientEnum {
    _0 = '0',
    _1 = '1',
    _2 = '2',
    _3 = '3',
    _4 = '4'
}


/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username': string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'lastKnowLocLat': number;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'lastKnowLocLong': number;
    /**
     * 
     * @type {CategoryEnum}
     * @memberof User
     */
    'category'?: CategoryEnum;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'usuario': number;
}



/**
 * ChatApi - axios parameter creator
 * @export
 */
export const ChatApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new chat
         * @param {Chat} [chat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatCreateCreate: async (chat?: Chat, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/chat/create/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chat, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new message in a chat
         * @param {number} chatId 
         * @param {MessageCreate} messageCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatCreateMessageCreate: async (chatId: number, messageCreate: MessageCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('chatCreateMessageCreate', 'chatId', chatId)
            // verify required parameter 'messageCreate' is not null or undefined
            assertParamExists('chatCreateMessageCreate', 'messageCreate', messageCreate)
            const localVarPath = `/api/chat/{chat_id}/createMessage/`
                .replace(`{${"chat_id"}}`, encodeURIComponent(String(chatId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a chat
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatDeleteDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('chatDeleteDestroy', 'id', id)
            const localVarPath = `/api/chat/{id}/delete/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a message
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatDeleteMessageDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('chatDeleteMessageDestroy', 'id', id)
            const localVarPath = `/api/chat/{id}/deleteMessage/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of chats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatListList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/chat/list/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Detail of a chat
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatMessagesRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('chatMessagesRetrieve', 'id', id)
            const localVarPath = `/api/chat/{id}/messages`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatApi - functional programming interface
 * @export
 */
export const ChatApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new chat
         * @param {Chat} [chat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatCreateCreate(chat?: Chat, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Chat>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatCreateCreate(chat, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.chatCreateCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new message in a chat
         * @param {number} chatId 
         * @param {MessageCreate} messageCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatCreateMessageCreate(chatId: number, messageCreate: MessageCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatCreateMessageCreate(chatId, messageCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.chatCreateMessageCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a chat
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatDeleteDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatDeleteDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.chatDeleteDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a message
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatDeleteMessageDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatDeleteMessageDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.chatDeleteMessageDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of chats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatListList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Chat>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatListList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.chatListList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Detail of a chat
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatMessagesRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Chat>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatMessagesRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.chatMessagesRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChatApi - factory interface
 * @export
 */
export const ChatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatApiFp(configuration)
    return {
        /**
         * Create a new chat
         * @param {ChatApiChatCreateCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatCreateCreate(requestParameters: ChatApiChatCreateCreateRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Chat> {
            return localVarFp.chatCreateCreate(requestParameters.chat, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new message in a chat
         * @param {ChatApiChatCreateMessageCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatCreateMessageCreate(requestParameters: ChatApiChatCreateMessageCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Message> {
            return localVarFp.chatCreateMessageCreate(requestParameters.chatId, requestParameters.messageCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a chat
         * @param {ChatApiChatDeleteDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatDeleteDestroy(requestParameters: ChatApiChatDeleteDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.chatDeleteDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a message
         * @param {ChatApiChatDeleteMessageDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatDeleteMessageDestroy(requestParameters: ChatApiChatDeleteMessageDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.chatDeleteMessageDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * List of chats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatListList(options?: RawAxiosRequestConfig): AxiosPromise<Array<Chat>> {
            return localVarFp.chatListList(options).then((request) => request(axios, basePath));
        },
        /**
         * Detail of a chat
         * @param {ChatApiChatMessagesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatMessagesRetrieve(requestParameters: ChatApiChatMessagesRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<Chat> {
            return localVarFp.chatMessagesRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for chatCreateCreate operation in ChatApi.
 * @export
 * @interface ChatApiChatCreateCreateRequest
 */
export interface ChatApiChatCreateCreateRequest {
    /**
     * 
     * @type {Chat}
     * @memberof ChatApiChatCreateCreate
     */
    readonly chat?: Chat
}

/**
 * Request parameters for chatCreateMessageCreate operation in ChatApi.
 * @export
 * @interface ChatApiChatCreateMessageCreateRequest
 */
export interface ChatApiChatCreateMessageCreateRequest {
    /**
     * 
     * @type {number}
     * @memberof ChatApiChatCreateMessageCreate
     */
    readonly chatId: number

    /**
     * 
     * @type {MessageCreate}
     * @memberof ChatApiChatCreateMessageCreate
     */
    readonly messageCreate: MessageCreate
}

/**
 * Request parameters for chatDeleteDestroy operation in ChatApi.
 * @export
 * @interface ChatApiChatDeleteDestroyRequest
 */
export interface ChatApiChatDeleteDestroyRequest {
    /**
     * 
     * @type {number}
     * @memberof ChatApiChatDeleteDestroy
     */
    readonly id: number
}

/**
 * Request parameters for chatDeleteMessageDestroy operation in ChatApi.
 * @export
 * @interface ChatApiChatDeleteMessageDestroyRequest
 */
export interface ChatApiChatDeleteMessageDestroyRequest {
    /**
     * 
     * @type {number}
     * @memberof ChatApiChatDeleteMessageDestroy
     */
    readonly id: number
}

/**
 * Request parameters for chatMessagesRetrieve operation in ChatApi.
 * @export
 * @interface ChatApiChatMessagesRetrieveRequest
 */
export interface ChatApiChatMessagesRetrieveRequest {
    /**
     * 
     * @type {number}
     * @memberof ChatApiChatMessagesRetrieve
     */
    readonly id: number
}

/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
export class ChatApi extends BaseAPI {
    /**
     * Create a new chat
     * @param {ChatApiChatCreateCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public chatCreateCreate(requestParameters: ChatApiChatCreateCreateRequest = {}, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).chatCreateCreate(requestParameters.chat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new message in a chat
     * @param {ChatApiChatCreateMessageCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public chatCreateMessageCreate(requestParameters: ChatApiChatCreateMessageCreateRequest, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).chatCreateMessageCreate(requestParameters.chatId, requestParameters.messageCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a chat
     * @param {ChatApiChatDeleteDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public chatDeleteDestroy(requestParameters: ChatApiChatDeleteDestroyRequest, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).chatDeleteDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a message
     * @param {ChatApiChatDeleteMessageDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public chatDeleteMessageDestroy(requestParameters: ChatApiChatDeleteMessageDestroyRequest, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).chatDeleteMessageDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of chats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public chatListList(options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).chatListList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Detail of a chat
     * @param {ChatApiChatMessagesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public chatMessagesRetrieve(requestParameters: ChatApiChatMessagesRetrieveRequest, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).chatMessagesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EventApi - axios parameter creator
 * @export
 */
export const EventApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new event
         * @param {Event} event 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventCreateCreate: async (event: Event, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'event' is not null or undefined
            assertParamExists('eventCreateCreate', 'event', event)
            const localVarPath = `/api/event/create/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(event, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an event
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventDeleteDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eventDeleteDestroy', 'id', id)
            const localVarPath = `/api/event/{id}/delete/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of events by client id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventListClientList: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eventListClientList', 'id', id)
            const localVarPath = `/api/event/list/client/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventListList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/event/list/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of events near a location
         * @param {number} latitude Latitude of the center point
         * @param {number} longitude Longitude of the center point
         * @param {number} radius Radius in kilometers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventNearbyList: async (latitude: number, longitude: number, radius: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'latitude' is not null or undefined
            assertParamExists('eventNearbyList', 'latitude', latitude)
            // verify required parameter 'longitude' is not null or undefined
            assertParamExists('eventNearbyList', 'longitude', longitude)
            // verify required parameter 'radius' is not null or undefined
            assertParamExists('eventNearbyList', 'radius', radius)
            const localVarPath = `/api/event/nearby/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a rating
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventRatingDeleteDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eventRatingDeleteDestroy', 'id', id)
            const localVarPath = `/api/event/rating/{id}/delete/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PatchedEvent} [patchedEvent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventUpdatePartialUpdate: async (id: number, patchedEvent?: PatchedEvent, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eventUpdatePartialUpdate', 'id', id)
            const localVarPath = `/api/event/{id}/update/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedEvent, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an event
         * @param {number} id 
         * @param {Event} event 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventUpdateUpdate: async (id: number, event: Event, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eventUpdateUpdate', 'id', id)
            // verify required parameter 'event' is not null or undefined
            assertParamExists('eventUpdateUpdate', 'event', event)
            const localVarPath = `/api/event/{id}/update/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(event, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventApi - functional programming interface
 * @export
 */
export const EventApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new event
         * @param {Event} event 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventCreateCreate(event: Event, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventCreateCreate(event, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.eventCreateCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an event
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventDeleteDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventDeleteDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.eventDeleteDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of events by client id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventListClientList(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Event>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventListClientList(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.eventListClientList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventListList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Event>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventListList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.eventListList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of events near a location
         * @param {number} latitude Latitude of the center point
         * @param {number} longitude Longitude of the center point
         * @param {number} radius Radius in kilometers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventNearbyList(latitude: number, longitude: number, radius: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Event>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventNearbyList(latitude, longitude, radius, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.eventNearbyList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a rating
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventRatingDeleteDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventRatingDeleteDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.eventRatingDeleteDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {PatchedEvent} [patchedEvent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventUpdatePartialUpdate(id: number, patchedEvent?: PatchedEvent, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Event>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventUpdatePartialUpdate(id, patchedEvent, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.eventUpdatePartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an event
         * @param {number} id 
         * @param {Event} event 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventUpdateUpdate(id: number, event: Event, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventUpdateUpdate(id, event, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.eventUpdateUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EventApi - factory interface
 * @export
 */
export const EventApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventApiFp(configuration)
    return {
        /**
         * Create a new event
         * @param {EventApiEventCreateCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventCreateCreate(requestParameters: EventApiEventCreateCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eventCreateCreate(requestParameters.event, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an event
         * @param {EventApiEventDeleteDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventDeleteDestroy(requestParameters: EventApiEventDeleteDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eventDeleteDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * List of events by client id
         * @param {EventApiEventListClientListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventListClientList(requestParameters: EventApiEventListClientListRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Event>> {
            return localVarFp.eventListClientList(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * List of events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventListList(options?: RawAxiosRequestConfig): AxiosPromise<Array<Event>> {
            return localVarFp.eventListList(options).then((request) => request(axios, basePath));
        },
        /**
         * List of events near a location
         * @param {EventApiEventNearbyListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventNearbyList(requestParameters: EventApiEventNearbyListRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Event>> {
            return localVarFp.eventNearbyList(requestParameters.latitude, requestParameters.longitude, requestParameters.radius, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a rating
         * @param {EventApiEventRatingDeleteDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventRatingDeleteDestroy(requestParameters: EventApiEventRatingDeleteDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eventRatingDeleteDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventApiEventUpdatePartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventUpdatePartialUpdate(requestParameters: EventApiEventUpdatePartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Event> {
            return localVarFp.eventUpdatePartialUpdate(requestParameters.id, requestParameters.patchedEvent, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an event
         * @param {EventApiEventUpdateUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventUpdateUpdate(requestParameters: EventApiEventUpdateUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eventUpdateUpdate(requestParameters.id, requestParameters.event, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for eventCreateCreate operation in EventApi.
 * @export
 * @interface EventApiEventCreateCreateRequest
 */
export interface EventApiEventCreateCreateRequest {
    /**
     * 
     * @type {Event}
     * @memberof EventApiEventCreateCreate
     */
    readonly event: Event
}

/**
 * Request parameters for eventDeleteDestroy operation in EventApi.
 * @export
 * @interface EventApiEventDeleteDestroyRequest
 */
export interface EventApiEventDeleteDestroyRequest {
    /**
     * 
     * @type {number}
     * @memberof EventApiEventDeleteDestroy
     */
    readonly id: number
}

/**
 * Request parameters for eventListClientList operation in EventApi.
 * @export
 * @interface EventApiEventListClientListRequest
 */
export interface EventApiEventListClientListRequest {
    /**
     * 
     * @type {number}
     * @memberof EventApiEventListClientList
     */
    readonly id: number
}

/**
 * Request parameters for eventNearbyList operation in EventApi.
 * @export
 * @interface EventApiEventNearbyListRequest
 */
export interface EventApiEventNearbyListRequest {
    /**
     * Latitude of the center point
     * @type {number}
     * @memberof EventApiEventNearbyList
     */
    readonly latitude: number

    /**
     * Longitude of the center point
     * @type {number}
     * @memberof EventApiEventNearbyList
     */
    readonly longitude: number

    /**
     * Radius in kilometers
     * @type {number}
     * @memberof EventApiEventNearbyList
     */
    readonly radius: number
}

/**
 * Request parameters for eventRatingDeleteDestroy operation in EventApi.
 * @export
 * @interface EventApiEventRatingDeleteDestroyRequest
 */
export interface EventApiEventRatingDeleteDestroyRequest {
    /**
     * 
     * @type {number}
     * @memberof EventApiEventRatingDeleteDestroy
     */
    readonly id: number
}

/**
 * Request parameters for eventUpdatePartialUpdate operation in EventApi.
 * @export
 * @interface EventApiEventUpdatePartialUpdateRequest
 */
export interface EventApiEventUpdatePartialUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof EventApiEventUpdatePartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedEvent}
     * @memberof EventApiEventUpdatePartialUpdate
     */
    readonly patchedEvent?: PatchedEvent
}

/**
 * Request parameters for eventUpdateUpdate operation in EventApi.
 * @export
 * @interface EventApiEventUpdateUpdateRequest
 */
export interface EventApiEventUpdateUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof EventApiEventUpdateUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Event}
     * @memberof EventApiEventUpdateUpdate
     */
    readonly event: Event
}

/**
 * EventApi - object-oriented interface
 * @export
 * @class EventApi
 * @extends {BaseAPI}
 */
export class EventApi extends BaseAPI {
    /**
     * Create a new event
     * @param {EventApiEventCreateCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventCreateCreate(requestParameters: EventApiEventCreateCreateRequest, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).eventCreateCreate(requestParameters.event, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an event
     * @param {EventApiEventDeleteDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventDeleteDestroy(requestParameters: EventApiEventDeleteDestroyRequest, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).eventDeleteDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of events by client id
     * @param {EventApiEventListClientListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventListClientList(requestParameters: EventApiEventListClientListRequest, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).eventListClientList(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of events
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventListList(options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).eventListList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of events near a location
     * @param {EventApiEventNearbyListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventNearbyList(requestParameters: EventApiEventNearbyListRequest, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).eventNearbyList(requestParameters.latitude, requestParameters.longitude, requestParameters.radius, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a rating
     * @param {EventApiEventRatingDeleteDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventRatingDeleteDestroy(requestParameters: EventApiEventRatingDeleteDestroyRequest, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).eventRatingDeleteDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventApiEventUpdatePartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventUpdatePartialUpdate(requestParameters: EventApiEventUpdatePartialUpdateRequest, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).eventUpdatePartialUpdate(requestParameters.id, requestParameters.patchedEvent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an event
     * @param {EventApiEventUpdateUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public eventUpdateUpdate(requestParameters: EventApiEventUpdateUpdateRequest, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).eventUpdateUpdate(requestParameters.id, requestParameters.event, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Client} client 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersClientRegisterCreate: async (client: Client, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'client' is not null or undefined
            assertParamExists('usersClientRegisterCreate', 'client', client)
            const localVarPath = `/api/users/client/register/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(client, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Inicia la sesión del usuario y devuelve el token de autenticación
         * @param {LoginUser} loginUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLoginCreate: async (loginUser: LoginUser, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginUser' is not null or undefined
            assertParamExists('usersLoginCreate', 'loginUser', loginUser)
            const localVarPath = `/api/users/login/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cierra la sesión del usuario
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLogoutCreate: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/logout/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserRegisterCreate: async (user: User, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('usersUserRegisterCreate', 'user', user)
            const localVarPath = `/api/users/user/register/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Client} client 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersClientRegisterCreate(client: Client, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersClientRegisterCreate(client, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersClientRegisterCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Inicia la sesión del usuario y devuelve el token de autenticación
         * @param {LoginUser} loginUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersLoginCreate(loginUser: LoginUser, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersLoginCreate(loginUser, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersLoginCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cierra la sesión del usuario
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersLogoutCreate(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersLogoutCreate(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersLogoutCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserRegisterCreate(user: User, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserRegisterCreate(user, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersUserRegisterCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {UsersApiUsersClientRegisterCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersClientRegisterCreate(requestParameters: UsersApiUsersClientRegisterCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersClientRegisterCreate(requestParameters.client, options).then((request) => request(axios, basePath));
        },
        /**
         * Inicia la sesión del usuario y devuelve el token de autenticación
         * @param {UsersApiUsersLoginCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLoginCreate(requestParameters: UsersApiUsersLoginCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenResponse> {
            return localVarFp.usersLoginCreate(requestParameters.loginUser, options).then((request) => request(axios, basePath));
        },
        /**
         * Cierra la sesión del usuario
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLogoutCreate(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersLogoutCreate(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsersApiUsersUserRegisterCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserRegisterCreate(requestParameters: UsersApiUsersUserRegisterCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersUserRegisterCreate(requestParameters.user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for usersClientRegisterCreate operation in UsersApi.
 * @export
 * @interface UsersApiUsersClientRegisterCreateRequest
 */
export interface UsersApiUsersClientRegisterCreateRequest {
    /**
     * 
     * @type {Client}
     * @memberof UsersApiUsersClientRegisterCreate
     */
    readonly client: Client
}

/**
 * Request parameters for usersLoginCreate operation in UsersApi.
 * @export
 * @interface UsersApiUsersLoginCreateRequest
 */
export interface UsersApiUsersLoginCreateRequest {
    /**
     * 
     * @type {LoginUser}
     * @memberof UsersApiUsersLoginCreate
     */
    readonly loginUser: LoginUser
}

/**
 * Request parameters for usersUserRegisterCreate operation in UsersApi.
 * @export
 * @interface UsersApiUsersUserRegisterCreateRequest
 */
export interface UsersApiUsersUserRegisterCreateRequest {
    /**
     * 
     * @type {User}
     * @memberof UsersApiUsersUserRegisterCreate
     */
    readonly user: User
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {UsersApiUsersClientRegisterCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersClientRegisterCreate(requestParameters: UsersApiUsersClientRegisterCreateRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersClientRegisterCreate(requestParameters.client, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Inicia la sesión del usuario y devuelve el token de autenticación
     * @param {UsersApiUsersLoginCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersLoginCreate(requestParameters: UsersApiUsersLoginCreateRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersLoginCreate(requestParameters.loginUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cierra la sesión del usuario
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersLogoutCreate(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersLogoutCreate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiUsersUserRegisterCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserRegisterCreate(requestParameters: UsersApiUsersUserRegisterCreateRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUserRegisterCreate(requestParameters.user, options).then((request) => request(this.axios, this.basePath));
    }
}



